const { Telegraf } = require('telegraf');
const { GoogleSpreadsheet } = require('google-spreadsheet');
const { JWT } = require('google-auth-library');

const serviceAccountAuth = new JWT({
  email: process.env.GOOGLE_CLIENT_EMAIL,
  key: process.env.GOOGLE_PRIVATE_KEY?.replace(/\\n/g, '\n'),
  scopes: ['https://www.googleapis.com/auth/spreadsheets'],
});

const doc = new GoogleSpreadsheet(process.env.GOOGLE_SHEET_ID, serviceAccountAuth);

// Danh m·ª•c ƒë·∫ßy ƒë·ªß
const categories = {
  'chi ph√≠ xe √¥ t√¥': { 
    emoji: 'üöó', 
    subcategories: ['xƒÉng', 'r·ª≠a xe', 'vetc', 's·ª≠a ch·ªØa', 'v√© ƒë·ªó xe', 'ƒë·ªï xƒÉng', 'nhi√™n li·ªáu'] 
  },
  'xƒÉng': { 
    emoji: '‚õΩ', 
    subcategories: ['xƒÉng', 'nhi√™n li·ªáu', 'ƒë·ªï xƒÉng'],
    parent: 'Chi ph√≠ xe √¥ t√¥'
  },
  'r·ª≠a xe': { 
    emoji: 'üßΩ', 
    subcategories: ['r·ª≠a xe', 'v·ªá sinh xe'] 
  },
  'vetc': { 
    emoji: 'üé´', 
    subcategories: ['vetc', 'thu ph√≠ kh√¥ng d·ª´ng'] 
  },
  'nh√† h√†ng': { 
    emoji: 'üçΩÔ∏è', 
    subcategories: ['ƒÉn s√°ng', 'ƒÉn tr∆∞a', 'ƒÉn t·ªëi', 'caf√©'] 
  },
  'ƒÉn s√°ng': { 
    emoji: 'üç≥', 
    subcategories: ['ph·ªü', 'b√°nh m√¨', 'c∆°m'] 
  },
  'ƒÉn tr∆∞a': { 
    emoji: 'üç±', 
    subcategories: ['c∆°m', 'b√∫n', 'ph·ªü'] 
  },
  'ƒÉn t·ªëi': { 
    emoji: 'üçΩÔ∏è', 
    subcategories: ['c∆°m', 'l·∫©u', 'n∆∞·ªõng'] 
  },
  'caf√©': { 
    emoji: '‚òï', 
    subcategories: ['c√† ph√™', 'tr√†', 'n∆∞·ªõc'] 
  },
  'giao nh·∫≠n ƒë·ªì': { 
    emoji: 'üì¶', 
    subcategories: ['giao ƒë·ªì', 'ship ƒë·ªì', 'grab food'] 
  },
  'ship ƒë·ªì': { 
    emoji: 'üìÆ', 
    subcategories: ['ph√≠ ship', 'giao h√†ng'] 
  },
  'mua ƒë·ªì': { 
    emoji: 'üõí', 
    subcategories: ['qu·∫ßn √°o', 'gi√†y d√©p', 'm·ªπ ph·∫©m'] 
  },
  'd·ªãch v·ª•': { 
    emoji: 'üîß', 
    subcategories: ['c·∫Øt t√≥c', 'massage', 'spa'] 
  },
  'chi ph√≠ kh√°c': { 
    emoji: 'üí∞', 
    subcategories: ['kh√°c', 'linh tinh'] 
  },
  // Th√™m danh m·ª•c cho c√°c kho·∫£n thu
  '·ª©ng tr∆∞·ªõc': { 
    emoji: 'üí≥', 
    subcategories: ['·ª©ng', 't·∫°m ·ª©ng'] 
  },
  'ho√†n ti·ªÅn': { 
    emoji: '‚Ü©Ô∏è', 
    subcategories: ['ho√†n', 'ho√†n tr·∫£'] 
  }
};

const paymentMethods = {
  'tk': 'Chuy·ªÉn kho·∫£n',
  'chuy·ªÉn kho·∫£n': 'Chuy·ªÉn kho·∫£n',
  'banking': 'Chuy·ªÉn kho·∫£n',
  'tm': 'Ti·ªÅn m·∫∑t',
  'ti·ªÅn m·∫∑t': 'Ti·ªÅn m·∫∑t',
  'cash': 'Ti·ªÅn m·∫∑t'
};

function parseExpense(text) {
  const input = text.toLowerCase().trim();
  
  // Regex nh·∫≠n di·ªán s·ªë ti·ªÅn
  const amountRegex = /(\d{1,3}(?:[.,]\d{3})*(?:[.,]\d+)?)\s*(k|ƒë|vnd|d|ng|ngh√¨n|tri·ªáu)?\b/i;
  const amountMatch = input.match(amountRegex);
  
  let amount = 0;
  let category = 'Chi ph√≠ kh√°c';
  let emoji = 'üí∞';
  let subcategory = 'Kh√°c';
  let paymentMethod = 'Ti·ªÅn m·∫∑t';
  let quantity = 1;
  let type = 'expense'; // M·∫∑c ƒë·ªãnh l√† chi ti√™u
  
  // Nh·∫≠n di·ªán s·ªë l√≠t xƒÉng
  let fuelQuantity = 1;
  const fuelRegex = /(\d+)\s*(l√≠t|l|lit)\b/i;
  const fuelMatch = input.match(fuelRegex);
  
  if (fuelMatch) {
    fuelQuantity = parseInt(fuelMatch[1]);
  }

  // X·ª≠ l√Ω s·ªë ti·ªÅn
  if (amountMatch) {
    let amountStr = amountMatch[1].replace(/[.,]/g, '');
    amount = parseInt(amountStr);
    
    const unit = amountMatch[2] ? amountMatch[2].toLowerCase() : '';
    if (unit === 'k' || unit === 'ngh√¨n' || unit === 'ng') {
      amount *= 1000;
    } else if (unit === 'tri·ªáu') {
      amount *= 1000000;
    }
  }
  
  // X√°c ƒë·ªãnh lo·∫°i giao d·ªãch TR∆Ø·ªöC khi ph√¢n lo·∫°i danh m·ª•c
  // Th√™m h·ªó tr·ª£ "·ª©ng" v√† "ho√†n" nh∆∞ thu nh·∫≠p
  if (input.includes('thu') || input.includes('nh·∫≠n') || input.includes('l∆∞∆°ng') || 
      input.includes('·ª©ng') || input.includes('ho√†n')) {
    type = 'income';
    emoji = 'üíµ';
    
    // X√°c ƒë·ªãnh danh m·ª•c c·ª• th·ªÉ cho thu nh·∫≠p
    if (input.includes('·ª©ng')) {
      category = '·ª®ng tr∆∞·ªõc';
      emoji = 'üí≥';
    } else if (input.includes('ho√†n')) {
      category = 'Ho√†n ti·ªÅn';
      emoji = '‚Ü©Ô∏è';
    } else {
      category = 'Thu nh·∫≠p';
    }
  }
  
  // Ch·ªâ ph√¢n lo·∫°i danh m·ª•c n·∫øu l√† chi ti√™u (expense)
  if (type === 'expense') {
    // T√¨m danh m·ª•c t·ªët nh·∫•t
    let bestMatch = '';
    let matchLength = 0;
    
    for (let cat in categories) {
      const keywords = [cat, ...categories[cat].subcategories];
      const hasMatch = keywords.some(keyword => input.includes(keyword));
      
      if (hasMatch && cat.length > matchLength) {
        bestMatch = cat;
        matchLength = cat.length;
      }
    }
    
    if (bestMatch) {
      // ∆Øu ti√™n s·ª≠ d·ª•ng danh m·ª•c cha n·∫øu c√≥
      if (categories[bestMatch].parent) {
        category = categories[bestMatch].parent;
        emoji = categories[category.toLowerCase()]?.emoji || categories[bestMatch].emoji;
      } else {
        category = bestMatch.charAt(0).toUpperCase() + bestMatch.slice(1);
        emoji = categories[bestMatch].emoji;
      }
      
      // T√¨m danh m·ª•c con ph√π h·ª£p
      for (let sub of categories[bestMatch].subcategories) {
        if (input.includes(sub)) {
          subcategory = sub.charAt(0).toUpperCase() + sub.slice(1);
          break;
        }
      }
    }
    
    // X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho tr∆∞·ªùng h·ª£p xƒÉng
    if (input.includes('xƒÉng') || input.includes('ƒë·ªï xƒÉng')) {
      category = 'Chi ph√≠ xe √¥ t√¥';
      subcategory = 'XƒÉng';
      emoji = '‚õΩ';
      
      // S·ª≠ d·ª•ng s·ªë l∆∞·ª£ng xƒÉng n·∫øu c√≥
      if (fuelMatch) {
        quantity = fuelQuantity;
      }
    }
  }
  
  // Nh·∫≠n di·ªán ph∆∞∆°ng th·ª©c thanh to√°n (ch·ªâ cho chi ti√™u)
  if (type === 'expense') {
    for (let method in paymentMethods) {
      if (input.includes(method)) {
        paymentMethod = paymentMethods[method];
        break;
      }
    }
  }
  
  // Nh·∫≠n di·ªán s·ªë l∆∞·ª£ng chung
  const quantityRegex = /(\d+)\s*(c√°i|ly|t√¥|ph·∫ßn|su·∫•t|l·∫ßn|kg|g√≥i|h·ªôp)\b/i;
  const quantityMatch = input.match(quantityRegex);
  if (quantityMatch) {
    quantity = parseInt(quantityMatch[1]);
  }
  
  return {
    amount,
    category,
    emoji,
    subcategory: subcategory || category,
    paymentMethod,
    quantity,
    type,
    description: text.trim()
  };
}

async function saveToSheet(userId, username, expenseData) {
  try {
    await doc.loadInfo();
    const sheet = doc.sheetsByIndex[0];
    
    const now = new Date();
    const dateStr = now.toLocaleDateString('vi-VN');
    const timeISO = now.toISOString();
    
    await sheet.addRow({
      'Ng√†y': dateStr,
      'Danh m·ª•c': expenseData.category,
      'M√¥ t·∫£': expenseData.description,
      'S·ªë ti·ªÅn': expenseData.amount,
      'Lo·∫°i': expenseData.type,
      'Link h√≥a ƒë∆°n': '',
      'Th·ªùi gian': timeISO,
      'Danh m·ª•c ph·ª•': expenseData.subcategory,
      'S·ªë l∆∞·ª£ng': expenseData.quantity,
      'Ph∆∞∆°ng th·ª©c thanh to√°n': expenseData.paymentMethod,
      'Ghi ch√∫': `${username} (${userId})`
    });
    
    return true;
  } catch (error) {
    console.error('Error saving to sheet:', error);
    return false;
  }
}

const bot = new Telegraf(process.env.BOT_TOKEN);

bot.start((ctx) => {
  ctx.reply(`ü§ñ Ch√†o m·ª´ng ${ctx.from.first_name}!\n\nüìù Nh·∫≠p chi ti√™u theo format:\n"XƒÉng xe 500k tk"\n"Ph·ªü b√≤ 55k tm"\n\nüí∏ Nh·∫≠p thu nh·∫≠p:\n"L∆∞∆°ng th√°ng 6 20 tri·ªáu"\n"·ª®ng 5 tri·ªáu"\n"Ho√†n v√© m√°y bay 1.5 tri·ªáu"\n\nüí≥ Thanh to√°n: tk = Chuy·ªÉn kho·∫£n, tm = Ti·ªÅn m·∫∑t`);
});

bot.help((ctx) => {
  ctx.reply(`üìñ H∆∞·ªõng d·∫´n:\n\nüîπ Nh·∫≠p chi ti√™u:\n"XƒÉng xe 500k tk"\n"Ph·ªü b√≤ 55k tm"\n\nüîπ Nh·∫≠p thu nh·∫≠p:\n"L∆∞∆°ng 10 tri·ªáu"\n"·ª®ng 3 tri·ªáu"\n"Ho√†n v√© xe 500k"\n\nüí≥ Thanh to√°n (ch·ªâ cho chi ti√™u):\n‚Ä¢ tk = Chuy·ªÉn kho·∫£n\n‚Ä¢ tm = Ti·ªÅn m·∫∑t\n\nüîπ L·ªánh:\n/categories - Danh m·ª•c`);
});

bot.command('categories', (ctx) => {
  let message = 'üìã Danh m·ª•c chi ti√™u & thu nh·∫≠p:\n\n';
  message += 'üíµ Thu nh·∫≠p:\n‚Ä¢ L∆∞∆°ng\n‚Ä¢ ·ª®ng tr∆∞·ªõc\n‚Ä¢ Ho√†n ti·ªÅn\n\n';
  message += 'üöó Chi ph√≠ xe √¥ t√¥: XƒÉng, R·ª≠a xe, VETC\n';
  message += 'üçΩÔ∏è Nh√† h√†ng: ƒÇn s√°ng, ƒÇn tr∆∞a, ƒÇn t·ªëi, Caf√©\n';
  message += 'üì¶ Giao nh·∫≠n ƒë·ªì: Ship ƒë·ªì, Grab food\n';
  message += 'üõí Mua ƒë·ªì/D·ªãch v·ª•: Mua s·∫Øm, Spa, C·∫Øt t√≥c\n';
  message += 'üí∞ Chi ph√≠ kh√°c: Linh tinh\n\n';
  message += 'üí° V√≠ d·ª•: "XƒÉng xe 500k tk", "·ª®ng 5 tri·ªáu", "Ho√†n ti·ªÅn v√© m√°y bay 1.5 tri·ªáu"';
  ctx.reply(message);
});

bot.on('text', async (ctx) => {
  const text = ctx.message.text;
  if (text.startsWith('/')) return;
  
  const expense = parseExpense(text);
  
  if (expense.amount <= 0) {
    return ctx.reply('‚ùå Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c s·ªë ti·ªÅn.\n\nüí° V√≠ d·ª•: "XƒÉng xe 500k tk", "·ª®ng 5 tri·ªáu"');
  }
  
  let confirmMsg;
  if (expense.type === 'income') {
    confirmMsg = `‚úÖ ƒê√£ ph√¢n t√≠ch (THU NH·∫¨P):\n\n${expense.emoji} ${expense.category}\nüí∞ ${expense.amount.toLocaleString('vi-VN')}‚Ç´\n\n‚è≥ ƒêang l∆∞u...`;
  } else {
    confirmMsg = `‚úÖ ƒê√£ ph√¢n t√≠ch (CHI TI√äU):\n\n${expense.emoji} ${expense.category}\nüí∞ ${expense.amount.toLocaleString('vi-VN')}‚Ç´\nüí≥ ${expense.paymentMethod}\n\n‚è≥ ƒêang l∆∞u...`;
  }
  
  const loadingMsg = await ctx.reply(confirmMsg);
  
  const saved = await saveToSheet(
    ctx.from.id,
    ctx.from.username || ctx.from.first_name,
    expense
  );
  
  if (saved) {
    await ctx.telegram.editMessageText(
      ctx.chat.id,
      loadingMsg.message_id,
      null,
      confirmMsg.replace('‚è≥ ƒêang l∆∞u...', '‚úÖ ƒê√£ l∆∞u th√†nh c√¥ng!')
    );
  } else {
    await ctx.telegram.editMessageText(
      ctx.chat.id,
      loadingMsg.message_id,
      null,
      '‚ùå C√≥ l·ªói khi l∆∞u. Vui l√≤ng th·ª≠ l·∫°i.'
    );
  }
});

bot.catch((err, ctx) => {
  console.error('Bot error:', err);
  ctx.reply('‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.');
});

// Production (Serverless environment)
exports.handler = async (event) => {
  try {
    await bot.handleUpdate(JSON.parse(event.body));
    return { statusCode: 200, body: '' };
  } catch (err) {
    console.error(err);
    return { statusCode: 500, body: 'Internal Server Error' };
  }
};

// Development (Local environment)
if (process.env.NODE_ENV === 'development') {
  bot.launch();
  process.once('SIGINT', () => bot.stop('SIGINT'));
  process.once('SIGTERM', () => bot.stop('SIGTERM'));
}
